package mrm;import java.net.InetAddress;import store.Card;import store.Movies;import mrm.physical.*; public class MRM implements Runnable{      public MRM(int id, String place, String storeName, InetAddress storeAddress)    {        this.id = id;        this.place = place;        this.storeName = storeName;        this.storeAddress = storeAddress;                       log = new Log();        cardReader = new CardReader(this);        movieDispenser = new MovieDispenser(log);        customerConsole = new CustomerConsole();        movieAcceptor = new MovieAcceptor(log);        networkToCenter = new NetworkToCenter(log, storeAddress);        operatorPanel = new OperatorPanel(this);        receiptPrinter = new ReceiptPrinter();                     state = OFF_STATE;        switchOn = false;        cardInserted = false;           }                 public void run()    {        Session currentSession = null;                while (true)        {            switch(state)            {                case OFF_STATE:                                    customerConsole.display("The Rental Machine is OFF\n" +                    		"Please click 'ON' to start ");                    synchronized(this)                    {                        try                        {                             wait();                        }                        catch(InterruptedException e)                        { }                    }                                        if (switchOn)                    {                        performStartup();                        state = IDLE_STATE;                    }                                                                break;                                    case IDLE_STATE:                                    customerConsole.display("   Please insert your card \n" +                    		"by clicking insert card button");                    cardInserted = false;                                                            synchronized(this)                    {                        try                        {                             wait();                        }                        catch(InterruptedException e)                        { }                    }                                               if (cardInserted)                    {                        currentSession = new Session(this);                        state = SERVING_CUSTOMER_STATE;                    }                    else if (! switchOn)                    {                        performShutdown();                        state = OFF_STATE;                    }                                        break;                            case SERVING_CUSTOMER_STATE:                                                                                              currentSession.performSession();                                        state = IDLE_STATE;                                        break;                            }        }    }                        public synchronized void switchOn()    {        switchOn = true;        notify();    }          public synchronized void switchOff()    {        switchOn = false;        notify();    }     public synchronized void cardInserted()    {        cardInserted = true;        notify();    }         public int getID()    {        return id;    }           public String getPlace()    {        return place;    }           public String getStoreName()    {        return storeName;    }          public CardReader getCardReader()    {        return cardReader;    }           public MovieDispenser getMovieDispenser()    {        return movieDispenser;    }           public CustomerConsole getCustomerConsole()    {        return customerConsole;    }            public MovieAcceptor getMovieAcceptor()    {        return movieAcceptor;    }          public Log getLog()    {        return log;    }             public NetworkToCenter getNetworkToCenter()    {        return networkToCenter;    }          public OperatorPanel getOperatorPanel()    {        return operatorPanel;    }          public ReceiptPrinter getReceiptPrinter()    {        return receiptPrinter;    }     private void performStartup()    {        Movies movieinventory = operatorPanel.movieinventory();        movieDispenser.setInventory(movieinventory);        networkToCenter.openConnection();         }          private void performShutdown()    {        networkToCenter.closeConnection();    }                      private int id;           private String place;        private String storeName;       private InetAddress storeAddress;               private CardReader cardReader;            private MovieDispenser movieDispenser;            private CustomerConsole customerConsole;            private MovieAcceptor movieAcceptor;           private Log log;           private NetworkToCenter networkToCenter;           private OperatorPanel operatorPanel;         private ReceiptPrinter receiptPrinter;               private int state;            private boolean switchOn;           private boolean cardInserted;         private static final int OFF_STATE = 0;           private static final int IDLE_STATE = 1;           private static final int SERVING_CUSTOMER_STATE = 2;}