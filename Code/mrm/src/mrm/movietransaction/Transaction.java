package mrm.movietransaction;import store.Balances;import store.Card;import store.Message;import store.Receipt;import store.Status;import mrm.MRM;import mrm.Session;import mrm.physical.*;public abstract class Transaction{    protected Transaction(MRM mrm, Session session, Card card, int zip)    {        this.mrm = mrm;        this.session = session;        this.card = card;        this.zip = zip;        this.serialNumber = nextSerialNumber ++;        this.balances = new Balances();                state = GETTING_SPECIFICS_STATE;    }             public static Transaction makeTransaction(MRM mrm, Session session,                                              Card card, int zip)                                throws CustomerConsole.Cancelled                  {        int choice = mrm.getCustomerConsole().readMenuChoice(                "Choose a Transaction", TRANSACTION_TYPES_MENU);                        switch(choice)        {            case 0:                            return new Rent(mrm, session, card, zip);                            case 1:                            return new Return(mrm, session, card, zip);                            case 2:                            return new Hold(mrm, session, card, zip);                                                        default:                            return null;           }    }         public boolean performTransaction() throws CardRetained    {        String doAnotherMessage = "";        Status status = null;        Receipt receipt = null;                while (true)           {            switch(state)            {                case GETTING_SPECIFICS_STATE:                                    try                    {                                   message = getSpecificsFromCustomer();                        mrm.getCustomerConsole().display("");                        state = SENDING_TO_STORE_STATE;                    }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case SENDING_TO_STORE_STATE:                                                    status = mrm.getNetworkToCenter().sendMessage(message, balances);                                    if (status.isInvalidZIP())                        state = INVALID_ZIP_STATE;                    else if (status.isSuccess())                        state = COMPLETING_TRANSACTION_STATE;                    else                    {                        doAnotherMessage = status.getMessage();                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                case INVALID_ZIP_STATE:                                    try                    {                        status = performInvalidZIPExtension();                                                                  if (status.isSuccess())                            state = COMPLETING_TRANSACTION_STATE;                        else                        {                            doAnotherMessage = status.getMessage();                            state = ASKING_DO_ANOTHER_STATE;                        }                    }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                    break;                                        case COMPLETING_TRANSACTION_STATE:                    try                    {                        receipt = completeTransaction();                        state = PRINTING_RECEIPT_STATE;                    }                    catch(CustomerConsole.Cancelled e)                    {                        doAnotherMessage = "Last transaction was cancelled";                        state = ASKING_DO_ANOTHER_STATE;                    }                                        break;                                    case PRINTING_RECEIPT_STATE:                                    mrm.getReceiptPrinter().printReceipt(receipt);                    state = ASKING_DO_ANOTHER_STATE;                                        break;                                    case ASKING_DO_ANOTHER_STATE:                                    if (doAnotherMessage.length() > 0)                        doAnotherMessage += "\n";                                            try                    {                        String [] yesNoMenu = { "Yes", "No" };                        boolean doAgain = mrm.getCustomerConsole().readMenuChoice(                            doAnotherMessage +                             "Would you like to do another transaction?",                            yesNoMenu) == 0;                        return doAgain;                    }                    catch(CustomerConsole.Cancelled e)                    {                        return false;                    }            }        }    }                 public Status performInvalidZIPExtension() throws CustomerConsole.Cancelled,                                                      CardRetained    {        Status status = null;        for (int i = 0; i < 2; i ++)        {            zip = mrm.getCustomerConsole().readZIP(                "ZIP was incorrect \n Please re-enter your ZIP\n" +                "Then press ENTER \n  should be < 1000");            mrm.getCustomerConsole().display("");                        message.setZIP(zip);            status = mrm.getNetworkToCenter().sendMessage(message, balances);            if (! status.isInvalidZIP())            {                session.setZIP(zip);                return status;            }        }                mrm.getCardReader().retainCard();        mrm.getCustomerConsole().display("You have reached the max attempt.");        try        {            Thread.sleep(5000);        }        catch(InterruptedException e)        { }        mrm.getCustomerConsole().display("");                        throw new CardRetained();    }          public int getSerialNumber()    {        return serialNumber;    }         protected abstract Message getSpecificsFromCustomer() throws CustomerConsole.Cancelled;        protected abstract Receipt completeTransaction() throws CustomerConsole.Cancelled;            public static class CardRetained extends Exception    {               public CardRetained()        {            super("Card retained due to too many invalid Zipcode");        }    }             protected MRM mrm;           protected Session session;           protected Card card;            protected int zip;           protected int serialNumber;            protected Message message;           protected Balances balances;           private static final String [] TRANSACTION_TYPES_MENU =         { "Rent", "Return", "Hold" };              private static int nextSerialNumber = 1;           private int state;          private static final int GETTING_SPECIFICS_STATE = 1;           private static final int SENDING_TO_STORE_STATE = 2;          private static final int INVALID_ZIP_STATE = 3;            private static final int COMPLETING_TRANSACTION_STATE = 4;          private static final int PRINTING_RECEIPT_STATE = 5;          private static final int ASKING_DO_ANOTHER_STATE = 6;}