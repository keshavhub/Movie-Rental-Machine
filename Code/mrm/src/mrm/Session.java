 package mrm;import store.Card;import store.Receipt;import store.Status;import mrm.movietransaction.Transaction;import mrm.physical.CustomerConsole;public class Session{     public Session(MRM mrm)    {        this.mrm = mrm;                state = READING_CARD_STATE;    }       public void performSession()    {        Card card = null;        Transaction currentTransaction = null;                while (state != FINAL_STATE)        {            switch(state)            {                case READING_CARD_STATE:                                                    card = mrm.getCardReader().readCard();                                        if (card != null)                        state = READING_ZIP_STATE;                    else                    {                        mrm.getCustomerConsole().display("Unable to read card \n" +                        		"Enter card number > 1000");                        state = EJECTING_CARD_STATE;                    }                    break;                                    case READING_ZIP_STATE:                                    try                    {                        zip = mrm.getCustomerConsole().readZIP(                            "Please enter your ZIP code\n" +                            "Then press ENTER");                        state = CHOOSING_TRANSACTION_STATE;                    }                    catch(CustomerConsole.Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                case CHOOSING_TRANSACTION_STATE:                                    try                    {                        currentTransaction =                             Transaction.makeTransaction(mrm, this, card, zip);                        state = PERFORMING_TRANSACTION_STATE;                    }                    catch(CustomerConsole.Cancelled e)                    {                        state = EJECTING_CARD_STATE;                    }                    break;                                    case PERFORMING_TRANSACTION_STATE:                                    try                    {                        boolean doAgain =                             currentTransaction.performTransaction();                        if (doAgain)                            state = CHOOSING_TRANSACTION_STATE;                        else                            state = EJECTING_CARD_STATE;                    }                    catch(Transaction.CardRetained e)                    {                        state = FINAL_STATE;                    }                    break;                                    case EJECTING_CARD_STATE:                                    mrm.getCardReader().ejectCard();                    state = FINAL_STATE;                    break;            }        }    }          public void setZIP(int zip)    {        this.zip = zip;    }         private MRM mrm;           private int zip;       private int state;          private static final int READING_CARD_STATE = 1;          private static final int READING_ZIP_STATE = 2;       private static final int CHOOSING_TRANSACTION_STATE = 3;            private static final int PERFORMING_TRANSACTION_STATE = 4;           private static final int EJECTING_CARD_STATE = 5;           private static final int FINAL_STATE = 6;    }