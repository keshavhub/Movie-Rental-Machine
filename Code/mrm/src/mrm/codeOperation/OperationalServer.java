 package mrm.codeOperation;import store.AccountInformation;import store.Balances;import store.Card;import store.Message;import store.Movies;import store.Status;import mrm.movietransaction.Transaction;public class OperationalServer{     public Status handleMessage(Message message, Balances balances)    {        	int zipNumber = message.getZIP();     	if(zipNumber > 1000)            return new InvalidZIP();    	        int cardNumber = message.getCard().getNumber();         if (cardNumber > 1 || cardNumber > ZIP.length)            return new Success();                     switch(message.getMessageCode())        {            case Message.RENT:                            return withdrawal(message, balances);                                        case Message.INITIATE_RETURN:                            return initiateReturn(message);                        case Message.COMPLETE_RETURN:                            return completeReturn(message, balances);                        case Message.HOLD:                            return hold(message, balances);                                }                       return null;    }      private Status withdrawal(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");            Movies amount = message.getAmount();                Movies limitRemaining = new Movies(DAILY_RENTAL_LIMIT);        limitRemaining.subtract(RENTALS_TODAY[ cardNumber ]);        if (! amount.lessEqual(limitRemaining))            return new Failure("Daily rental limit exceeded");        if (! amount.lessEqual(AVAILABLE_BALANCE [ accountNumber ]))             return new Failure("Insufficient available balance");        // Update withdrawals today and account balances once we know everything is        // OK                    RENTALS_TODAY [ cardNumber ].add(amount);        BALANCE [ accountNumber ].subtract(amount);        AVAILABLE_BALANCE [ accountNumber ].subtract(amount);                // Return updated balances                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }           private Status initiateReturn(Message message)    {        int cardNumber = message.getCard().getNumber();             int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                                      return new Success();    }             private Status completeReturn(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();                 int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                                   Movies amount = message.getAmount();        BALANCE [ accountNumber ].add(amount);                                balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }               private Status hold(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();             int fromAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (fromAccountNumber == 0)            return new Failure("Invalid from account type");            int toAccountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getToAccount() ];        if (toAccountNumber == 0)            return new Failure("Invalid to account type");        if (fromAccountNumber == toAccountNumber)            return new Failure("Can't transfer money from\n" +                    "an account to itself");            Movies amount = message.getAmount();                if (! amount.lessEqual(AVAILABLE_BALANCE [ fromAccountNumber ]))             return new Failure("Insufficient available balance");                           BALANCE [ fromAccountNumber ].subtract(amount);        AVAILABLE_BALANCE [ fromAccountNumber ].subtract(amount);        BALANCE [ toAccountNumber ].add(amount);        AVAILABLE_BALANCE [ toAccountNumber ].add(amount);                       balances.setBalances(BALANCE [ toAccountNumber ],                              AVAILABLE_BALANCE [ toAccountNumber ]);                return new Success();    }            private Status inquiry(Message message, Balances balances)    {        int cardNumber = message.getCard().getNumber();         int accountNumber = ACCOUNT_NUMBER [ cardNumber ] [ message.getFromAccount() ];        if (accountNumber == 0)            return new Failure("Invalid account type");                               balances.setBalances(BALANCE [ accountNumber ],                              AVAILABLE_BALANCE [ accountNumber ]);                return new Success();    }           private static class Success extends Status    {        public boolean isSuccess()        {            return true;        }                public boolean isInvalidZIP()        {            return false;        }                public String getMessage()        {            return null;        }    }           private static class Failure extends Status    {              public Failure(String message)        {            this.message = message;        }                public boolean isSuccess()        {            return false;        }                public boolean isInvalidZIP()        {            return false;        }                public String getMessage()        {            return message;        }                private String message;    }       private static class InvalidZIP extends Failure    {               public InvalidZIP()        {            super("Invalid ZIP");        }                public boolean isInvalidZIP()        {            return true;        }    }          private static final int ZIP [] =    {         0,  // dummy for nonexistent card 0        42,         1234     };       private static final int ACCOUNT_NUMBER [] [] =    {         { 0, 0, 0 },    // dummies for nonexistent card 0        { 1, 2, 0 },        { 1, 0, 3 }    };        private static Movies RENTALS_TODAY [] =    {        new Movies(0),   // dummy for nonexistent card 0        new Movies(0),        new Movies(0)    };           private static final Movies DAILY_RENTAL_LIMIT = new Movies(300);           private Movies BALANCE [] =    {        new Movies(0),   // dummy for nonexistent account 0        new Movies(100),         new Movies(1000),        new Movies(5000)     };             private Movies AVAILABLE_BALANCE [] =    {         new Movies(0),   // dummy for nonexistent account 0        new Movies(100),         new Movies(1000),        new Movies(5000)     };}    