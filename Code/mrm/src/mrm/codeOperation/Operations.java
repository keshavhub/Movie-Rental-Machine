package mrm.codeOperation;import store.Balances;import store.Card;import store.Message;import store.Movies;import store.Status;import mrm.MRM;public class Operations{    public Operations(MRM mrm)    {        this.mrm = mrm;                               operatorPanel = new OptOperatorPanel(this);        cardReader = new OptCardReader(this);        display = new OptDisplay();        movieDispenser = new OptMovieDispenser();        envelopeAcceptor = new OptEnvelopeAcceptor();        receiptPrinter = new OptReceiptPrinter();        keyboard = new OptKeyboard(display, envelopeAcceptor);                              gui = new GUI(operatorPanel, cardReader, display, keyboard,                      movieDispenser, envelopeAcceptor, receiptPrinter);                                operationalServer = new OperationalServer();                theInstance = this;    }            public static Operations getInstance()    {        return theInstance;    }        public Movies movieinventory()    {        return gui.movieinventory();    }           public Card readCard()    {               operatorPanel.setEnabled(false);        cardReader.animateInsertion();                              return gui.readCard();    }           public void ejectCard()    {        cardReader.animateEjection();              operatorPanel.setEnabled(true);    }            public void retainCard()    {        cardReader.animateRetention();              operatorPanel.setEnabled(true);    }            public void clearDisplay()    {        display.clearDisplay();    }            public void display(String text)    {        display.display(text);    }            public String readInput(int mode, int maxValue)    {        return keyboard.readInput(mode, maxValue);    }           public void dispenseMovie(Movies amount)    {        movieDispenser.animateDispensingCash(amount);    }      public boolean acceptEnvelope()    {        return envelopeAcceptor.acceptEnvelope();    }       public void printReceiptLine(String text)    {        receiptPrinter.println(text);    }         public void printLogLine(String text)    {        gui.printLogLine(text);    }          public Status sendMessage(Message message, Balances balances)    {                        try        {            Thread.sleep(2 * 1000);        }        catch(InterruptedException e)        { }                return operationalServer.handleMessage(message, balances);    }      void switchChanged(boolean on)    {                        cardReader.setVisible(on);                if (on)            mrm.switchOn();        else            mrm.switchOff();    }           void cardInserted()    {        mrm.cardInserted();    }          public GUI getGUI()    {        return gui;    }         public OperationalServer getSimulatedStore()    {        return operationalServer;    }      public static final int ZIP_MODE = 1;    public static final int AMOUNT_MODE = 2;    public static final int MENU_MODE = 3;    private MRM mrm;    private OptOperatorPanel operatorPanel;    private OptCardReader cardReader;    private OptDisplay display;    private OptKeyboard keyboard;    private OptMovieDispenser movieDispenser;    private OptEnvelopeAcceptor envelopeAcceptor;    private OptReceiptPrinter receiptPrinter;    private GUI gui;    private OperationalServer operationalServer;    private static Operations theInstance;}    